# 1. Describing and Using JavaScript Objects
--------------------------------------------

* Inheritance in JavaScript
---------------------------
	. Inheritance is a fundamental concept in JavaScript and object-oriented programming. 

		It's what allows developers to create objects that take on or inherit the features and functionality of other objects and extend them. 

		In JavaScript, inheritance is achieved through prototypes which I briefly introduced in the previous video. 

		The more you work with JavaScript, the more you'll encounter the term prototype. And the general idea of prototypes and even prototypes themselves can be quite puzzling for 		various reasons. 

		So let's spend some time reviewing the basics of inheritance and these mysterious prototypes and how they get used. 

Take a moment to think about what a prototype might represent in the real world. 

	. A prototype is usually a model from which other things are developed or patterned. 

		For example, imagine a car factory that produces different models of cars. Each car model has unique features and specs, but they all share common components such as the 		engine, wheels, and steering system. These common components might be part of a prototype from which different car models are built. 

		In the same way you can create different instances of an object with unique properties, but they can all inherit certain properties and methods from the same prototype. And 		in JavaScript, every object has a prototype. 

		Whenever you create an object, it automatically gets linked to a prototype object via a special hidden prototype property. And that's because all JavaScript objects are part 		of a mechanism called the prototype chain. 

		JavaScript uses it to implement inheritance and link objects together through their prototype. This prototype chain gets created as soon as you create an object and objects 		often inherit properties and methods from multiple prototypes. 

		When you try to access a property or method of an object, the JavaScript engine will first look for that property or method on the object itself. If the object has the 		property or method, JavaScript uses it. If it doesn't find it, it will look for it on the object's prototype. If it still doesn't find it, it's going to continue up the 		prototype chain until it reaches the object prototype, which is the default prototype for all objects. 

		In that case, the prototype is null, and that's where the chain ends. 


	. In an earlier video, I mentioned that JavaScript arrays, objects, and primitive types, like strings, for example let you access or call certain built-in properties and methods 	that are available by default. Like length, push, slice, two string, and many more. 

		So how do those methods become available to each array, string, or object instance you create? Well, as you've learned, everything in JavaScript can be thought of or treated 		as an object. 

		So prototypes for objects and even the prototypes of constructors for primitive data types like strings define some generic methods and properties. And the prototype chain 		is what plays a major role in allowing those properties and methods to be passed on and inherited by the objects and primitive types used in your programs. 

		So inheritance and prototypes make creating objects with common properties and methods possible, and it's important to understand the different ways to define objects. So in 		the following videos, we'll compare the different ways to create new object instances and their impact on inheritance.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The object literal
--------------------
You've learned that objects are an essential part of JavaScript, and there are several ways to create and work with objects. Understanding the strengths and limitations of each approach is crucial for any JavaScript developer. 

So let's first explore the basic structure of JavaScript objects created using object literal syntax. I'll teach you about the benefits of using object literals and how they're commonly used. 

	. (bell dings) The object literal is the most common way to create an object in JavaScript and is what we often think of first when talking about objects. 

		It's called object literal because it's a value that you explicitly or literally write in your code to create an object rather than the result of a constructor function or 		class, which are other approaches you'll learn about soon. 

		So imagine that you're creating a physical address book to keep track of information about friends. Yes, those are still a thing. 

		So you start by creating a list with some information about one friend, like their name, address, and phone number. 

		And then let's say that you want to add new information to your friend list, like their email. You could simply add a new entry to your list with a corresponding email 		address. 

		You can think of this list of information as an object in JavaScript. 

		It contains properties like your friend's name, address, phone number, email, and their corresponding values. 


	. Object literals in JavaScript work in a similar way. An object literal is that familiar collection of properties and values enclosed in curly braces, and one of the benefits of 		using object literals is their simplicity. 

		They provide a straightforward way to represent data in JavaScript, which makes them a reliable choice for creating objects. 

		Another benefit is their flexibility. Just like adding or removing information from your friend list, object literals allow you to easily add, remove, or modify individual 			properties, and you can assign object literals to variables, pass them as arguments to functions, store them in arrays, and even assign them to properties of an object. 
		Developers commonly use object literals to store data and create multiple objects with the same structure. 

		So imagine that you start filling out your address book by adding more and more lists of friends. Each list requires the same set of labels, but with different specific 		information for each friend, and you might have tens or hundreds of friends and family lists all inside the same address book. 

		Thinking about this in JavaScript, you could create and store tens or hundreds of object literals, each within the same structure, like an array or another object, but with 		different values for each property, and then to access and modify the properties of an object literal, you can use either dot notation or bracket notation. 

		There are several ways you can create and work with objects in JavaScript, but using object literals can be a more concise and straightforward way in many cases. Object 		Literals can handle the job, whether you're creating a small object with a few properties, a larger object with many nested properties, or even multiple objects with the 		same structure.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Define an object using a constructor function
-----------------------------------------------
In JavaScript there are two ways to create and store data in an object. 

	. The object literal is the simplest and most common way to create objects. 

	. The other way is using a constructor function. 

So now let's explore what constructors are and how developers use them to describe an object structure and behavior with just a single function. 

That way the next time you come across the term constructor or constructor function, you'll be more equipped with the basics of how they're used. 

	A constructor is a special function that you call using JavaScript's new keyword. 

	Think of a constructor function as a template for creating one or multiple objects with similar properties and behavior. 

	When you call a constructor it creates and initializes a new object. 

	And there are two main ways to create objects with constructor functions. 

		One is with JavaScripts built in object constructor and the other is with a custom constructor function. 

		You may come across the built-in object constructor function at times. 	

		In the video, almost everything in JavaScript is an object. I mentioned that JavaScript provides several built-in constructors to convert primitive types, such as 
		strings, arrays, numbers, and others into objects. 

		So JavaScript also has an object constructor that can create a new empty object. 

		Now with that approach you need to manually add new properties and methods to that object using .notation, which sounds tedious. And like a lot of extra typing, what if 
		we had to create tens or hundreds of new objects this way? No thanks. 

		So because of that developers avoid using the built-in object constructor. 

		Instead, custom constructor functions are the most common way to create objects with constructors. 

		You create a custom constructor similar to how you would write or declare a typical function in JavaScript using the function keyword. And you'll immediately recognize 		constructive functions because their name by convention starts with an uppercase letter and they rely heavily on JavaScripts 'this keyword' in the function body. So think 		back to your address book, which needs to store information about all your contacts such as their name, address, and phone number. 

		Now, imagine a constructor function named contact that takes three arguments via parameters named name, address, and phone. 

		And the job of this constructor function is to return a new contact object. 

		JavaScripts 'this keyword' is important in a constructor function because it defines the properties and values of the created object. 

		Think of the 'this keyword' as a placeholder that refers to the new object created by the constructor. So for example, to add a name property to a contact object you might 		specify that this.name should equal the value passed in for the name argument, this.address for the address argument, and so on. Once you've defined your function you can 		create a new instance of the contact object using the new keyword. 

		And since the constructors 'this keyword' refers to the newly created object you can create multiple unique contact objects and pass each different arguments for name, 		address, and phone. 

		Now, if you're familiar with the object literal syntax you might ask, why would I want to use constructive functions in the first place? Object literals are much simpler. 
		Good question. Both object literals and constructive functions have their place in JavaScript programming and can be used effectively depending on the situation. 

		Object literals are useful for simple one-off or multiple objects that are similar in structure and don't require additional functionality beyond their basic properties and 		methods. 

		You can create them quickly and easily using simple syntax. Now, one of the biggest benefits of constructive functions is reusability. 

		Constructive functions create a base template that other objects inherit from which helps reduce code duplication and provides a consistent set of properties and methods 		across multiple related objects. 

		Overall, constructors help provide more control over your objects, and because of that developers often use constructors to create more complex objects that require 
		specific behaviors and properties. 

		And are generally preferred for larger scale applications and object-oriented programming where modularity, organization and reusability are important. 

		Constructor functions are just one of the many tools available in JavaScript. The choice of which to use between constructors and object literals often depends on the 		specific needs of your application.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Create objects using an existing object as the prototype
----------------------------------------------------------
Part of what makes working with JavaScript objects tricky is the many different ways to create and work with them. 

However, the more you learn about them, the better you can use their many features and advantages. 

Understanding the underlying concepts of objects can make your code more powerful, flexible, and reusable. 

Objects offer different ways of implementing inheritance, which as you've learned, is how objects can borrow, or inherit properties and methods from other objects. 

One way to implement inheritance is with a constructor, which we've talked about. And the other common way is with the built-in object.create method. 

Object.create lets you create a new object using an existing object as the prototype. The prototype contains all the features that any newly created objects will inherit. 

So take a moment to imagine an object A that you want to be a prototype of an object B. For that to happen, object B needs a way to link to, or access the properties of object A. 

That would make object B an extension of object A, and then you could create other objects from A, like object C and D. 

So the object.create method facilitates linking an object to a prototype. 

It takes an existing object, the prototype, as an argument, and returns a new object containing the specified prototype object in properties. 

Then object.create lets you customize the new object, by adding more properties through an optional second argument. 

So for example, say you define a car object as a prototype for new objects. 

The prototype includes all the specifications for a car, like its size, shape, color, and features. 

Based on this prototype, you can create copies of the same car object with consistent specifications. 

In JavaScript you create a new object by assigning object.create to a variable, let's name it Phantom GT, and pass it the car object as its argument. 

The Phantom GT object now has all the properties and methods of the car object, and we can access and modify them as we would any other object. 

Now any changes you make to the car prototype object will affect all objects that inherit from it. 

So if we were to add a new property to the car object, like self-driving, all objects that inherit from the car object, including phantom GT, will also have the self-driving property. 

And there's so much more that the object.create method can do, so I encourage you to look into and experiment with it. 

Overall, object.create allows more fine-tuned control over how you create an object, by using an existing object as the prototype, which provides flexibility and makes it possible to 
create objects that share common functionality without duplicate code.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Merge two or more JavaScript objects into a new object
--------------------------------------------------------
Have you ever needed to combine two or more objects into one object? For instance, you may have had an object containing properties you wanted to copy into another object so that you can work more efficiently with the data. 

Thinking back to your address book, let's say you had multiple contacts with the same address and you want to avoid manually repeating and copying that information into all contact objects sharing the same address. 

Merging objects is a common task you can quickly do in one of two ways, 

	JavaScript's Object.assign method or 

	the spread operator. 

So let's first talk about the Object.assign method. This method copies the properties and values of one or more objects to a target object. 

	You pass Object.assign the target object first or the object receiving the copied properties and any subsequent arguments are the source objects, containing the properties you want 	to copy. 

	Here's an example of how Objec.assign works. 

	Imagine you have a target object with the properties A and B, and a source object with a property C. When you use Object.assign to merge the source object into the target object, 	the resulting object will have the properties A, B, and C. 

	And later, you might also pass a new source object into Object.assign, which holds the properties D and E. In that case, the return target object will have the properties A, B, C, 	D, and E. 

	JavaScript's spread operator also lets you copy the properties of an object into a new object using a much shorter syntax, represented by three dots. So let's say that you have an 	object named Ellie, holding properties for a contact in your address book and you want to copy the properties of a shared address object into the Ellie object. 

	Well, in that case, you can use the spread syntax inside the Ellie object with dot, dot, dot, shared address and that will do the trick. 

	All properties of the shared address object will be copied into and appear inside the Ellie object. And you could also use the spread syntax to create entirely new objects by 	copying multiple objects into one. 

	Keep in mind that both Object.assign and the spread operator create what's called a shallow copy of a source object. 

	A shallow copy only duplicates the top level properties of the source object. Now the new object is still a distinct entity. However, if the source object contains any nested 	objects, they will not be duplicated as a separate copy. Instead, they get referenced to the exact location in memory as the source. So that means that changes made to one will 	affect the other because they both share a reference to the same value in memory. 

	That said, I highly recommend looking into shallow copies versus deep copies when it comes to JavaScript objects. 

	Finally, one key difference between the Object.assign method and the spread operator is that Object.assign overwrites properties with the same name in the target object. 

	Now, on the other hand, the spread operator only adds properties that don't exist in the target object. 

	Also, Object.assign can mutate or modify a target object in place, whereas the spread syntax can't. 

	The Object.assign method and the spread operator are useful tools that simplify many programming tasks like merging objects. 

	In general, if you need to merge two or more objects into a single target object or clone an object, Object.assign is a good choice. 

	And if you want to create a new object with some modifications or additions to an existing object, then the spread operator is more concise and easier to use.


------------------------------------------------------------------------------------------------------------------------------------------------------------------




























































