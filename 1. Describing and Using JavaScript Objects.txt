# 1. Describing and Using JavaScript Objects
--------------------------------------------

* Inheritance in JavaScript
---------------------------
	. Inheritance is a fundamental concept in JavaScript and object-oriented programming. 

		It's what allows developers to create objects that take on or inherit the features and functionality of other objects and extend them. 

		In JavaScript, inheritance is achieved through prototypes which I briefly introduced in the previous video. 

		The more you work with JavaScript, the more you'll encounter the term prototype. And the general idea of prototypes and even prototypes themselves can be quite puzzling for 		various reasons. 

		So let's spend some time reviewing the basics of inheritance and these mysterious prototypes and how they get used. 

Take a moment to think about what a prototype might represent in the real world. 

	. A prototype is usually a model from which other things are developed or patterned. 

		For example, imagine a car factory that produces different models of cars. Each car model has unique features and specs, but they all share common components such as the 		engine, wheels, and steering system. These common components might be part of a prototype from which different car models are built. 

		In the same way you can create different instances of an object with unique properties, but they can all inherit certain properties and methods from the same prototype. And 		in JavaScript, every object has a prototype. 

		Whenever you create an object, it automatically gets linked to a prototype object via a special hidden prototype property. And that's because all JavaScript objects are part 		of a mechanism called the prototype chain. 

		JavaScript uses it to implement inheritance and link objects together through their prototype. This prototype chain gets created as soon as you create an object and objects 		often inherit properties and methods from multiple prototypes. 

		When you try to access a property or method of an object, the JavaScript engine will first look for that property or method on the object itself. If the object has the 		property or method, JavaScript uses it. If it doesn't find it, it will look for it on the object's prototype. If it still doesn't find it, it's going to continue up the 		prototype chain until it reaches the object prototype, which is the default prototype for all objects. 

		In that case, the prototype is null, and that's where the chain ends. 


	. In an earlier video, I mentioned that JavaScript arrays, objects, and primitive types, like strings, for example let you access or call certain built-in properties and methods 	that are available by default. Like length, push, slice, two string, and many more. 

		So how do those methods become available to each array, string, or object instance you create? Well, as you've learned, everything in JavaScript can be thought of or treated 		as an object. 

		So prototypes for objects and even the prototypes of constructors for primitive data types like strings define some generic methods and properties. And the prototype chain 		is what plays a major role in allowing those properties and methods to be passed on and inherited by the objects and primitive types used in your programs. 

		So inheritance and prototypes make creating objects with common properties and methods possible, and it's important to understand the different ways to define objects. So in 		the following videos, we'll compare the different ways to create new object instances and their impact on inheritance.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The object literal
--------------------
You've learned that objects are an essential part of JavaScript, and there are several ways to create and work with objects. Understanding the strengths and limitations of each approach is crucial for any JavaScript developer. 

So let's first explore the basic structure of JavaScript objects created using object literal syntax. I'll teach you about the benefits of using object literals and how they're commonly used. 

	. (bell dings) The object literal is the most common way to create an object in JavaScript and is what we often think of first when talking about objects. 

		It's called object literal because it's a value that you explicitly or literally write in your code to create an object rather than the result of a constructor function or 		class, which are other approaches you'll learn about soon. 

		So imagine that you're creating a physical address book to keep track of information about friends. Yes, those are still a thing. 

		So you start by creating a list with some information about one friend, like their name, address, and phone number. 

		And then let's say that you want to add new information to your friend list, like their email. You could simply add a new entry to your list with a corresponding email 		address. 

		You can think of this list of information as an object in JavaScript. 

		It contains properties like your friend's name, address, phone number, email, and their corresponding values. 


	. Object literals in JavaScript work in a similar way. An object literal is that familiar collection of properties and values enclosed in curly braces, and one of the benefits of 		using object literals is their simplicity. 

		They provide a straightforward way to represent data in JavaScript, which makes them a reliable choice for creating objects. 

		Another benefit is their flexibility. Just like adding or removing information from your friend list, object literals allow you to easily add, remove, or modify individual 			properties, and you can assign object literals to variables, pass them as arguments to functions, store them in arrays, and even assign them to properties of an object. 
		Developers commonly use object literals to store data and create multiple objects with the same structure. 

		So imagine that you start filling out your address book by adding more and more lists of friends. Each list requires the same set of labels, but with different specific 		information for each friend, and you might have tens or hundreds of friends and family lists all inside the same address book. 

		Thinking about this in JavaScript, you could create and store tens or hundreds of object literals, each within the same structure, like an array or another object, but with 		different values for each property, and then to access and modify the properties of an object literal, you can use either dot notation or bracket notation. 

		There are several ways you can create and work with objects in JavaScript, but using object literals can be a more concise and straightforward way in many cases. Object 		Literals can handle the job, whether you're creating a small object with a few properties, a larger object with many nested properties, or even multiple objects with the 		same structure.


------------------------------------------------------------------------------------------------------------------------------------------------------------------






























